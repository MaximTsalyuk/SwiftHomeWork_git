/*–í—ã–ø–æ–ª–Ω–∏–ª:    –ú–∞–∫—Å–∏–º –¶–∞–ª—é–∫
 –ì—Ä—É–ø–ø–∞:    iOS 19-2
 –î–∞—Ç–∞ —Å–¥–∞—á–∏:    21.10.2019
 –ù–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è: 10
 –¢–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è:
 –ò–≥—Ä–∞ Sokoban
 
 10.1. –°–æ–∑–¥–∞–π—Ç–µ —Ç–∏–ø –ö–æ–º–Ω–∞—Ç–∞ (Room). –£ –∫–æ–º–Ω–∞—Ç—ã –µ—Å—Ç—å —Ä–∞–∑–º–µ—Ä—ã width –Ω–∞ height. –ò —Å–æ–∑–¥–∞–π—Ç–µ —Ç–∏–ø –ü–µ—Ä—Å–æ–Ω–∞–∂ (Player). –£ –Ω–µ–≥–æ –µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ X –∏ Y. –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –∫—Ä–∞—Å–∏–≤–µ–Ω—å–∫–æ —Ç–µ–∫—Å—Ç–æ–º –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ
 
 10.2. (1 –±–∞–ª–ª) –ü–µ—Ä—Å–æ–Ω–∞–∂—É –¥–æ–±–∞–≤—å—Ç–µ –º–µ—Ç–æ–¥ –∏–¥—Ç–∏ (move(to direction: Direction) ), –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —ç–Ω—É–º Direction: –ª–µ–≤–æ, –ø—Ä–∞–≤–æ, –≤–µ—Ä—Ö, –≤–Ω–∏–∑
 –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–¥–≤–∏–≥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –†–µ–∞–ª–∏–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª–æ —á—Ç–æ –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∏–Ω—É—Ç—å –ø—Ä–µ–¥–µ–ª—ã –∫–æ–º–Ω–∞—Ç—ã. –ü–æ–¥–≤–∏–≥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ –ø–æ–∫–∞–∂–∏—Ç–µ —ç—Ç–æ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏
 
 10.3. (1 –±–∞–ª–ª) –°–æ–∑–¥–∞—Ç—å —Ç–∏–ø –Ø—â–∏–∫ (Box). –£ —è—â–∏–∫–∞ —Ç–∞–∫–∂–µ –µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ X –∏ Y. –Ø—â–∏–∫ —Ç–∞–∫–∂–µ –Ω–µ –º–æ–∂–µ—Ç –ø–æ–∫–∏–¥–∞—Ç—å –ø—Ä–µ–¥–µ–ª—ã –∫–æ–º–Ω–∞—Ç—ã –∏ —è—â–∏–∫ —Ç–∞–∫–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞—Å–ø–µ—á–∞—Ç–∞–Ω –≤–º–µ—Å—Ç–µ —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—á–∞—Ç–∏.
 
 10.4. (2 –±–∞–ª–ª–∞) –¢–µ–ø–µ—Ä—å —Å–∞–º–æ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ, –ø–µ—Ä—Å–æ–Ω–∞–∂ –º–æ–∂–µ—Ç –¥–≤–∏–≥–∞—Ç—å —è—â–∏–∫, –µ—Å–ª–∏ –æ–Ω —Å—Ç–æ–∏—Ç –Ω–∞ —Ç–æ–º –º–µ—Å—Ç–µ, –∫—É–¥–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂ —Ö–æ—á–µ—Ç –ø–æ–ø–∞—Å—Ç—å. –ì–ª–∞–≤–Ω–æ–µ —á—Ç–æ –Ω–∏ –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç –Ω–µ –º–æ–∂–µ—Ç –ø–æ–∫–∏–Ω—É—Ç—å –ø—Ä–µ–¥–µ–ª—ã –∫–æ–º–Ω–∞—Ç—ã. –ü–æ–¥–≤–∏–≥–∞–π—Ç–µ —è—â–∏–∫ :)
 
 10.5. (2 –±–∞–ª–ª–∞) –î–æ–±–∞–≤—å—Ç–µ —Ç–æ—á–∫—É –≤ –∫–æ–º–Ω–∞—Ç–µ, –∫—É–¥–∞ –Ω–∞–¥–æ —è—â–∏–∫ –ø–µ—Ä–µ–¥–≤–∏–Ω—É—Ç—å –∏ –¥–≤–∏–≥–∞–π—Ç–µ. –ö–æ–≥–¥–∞ —è—â–∏–∫ –æ–∫–∞–∂–µ—Ç—Å—è –≤ —Ü–µ–ª–µ–≤–æ–π —Ç–æ—á–∫–µ, —Ç–æ –≤—ã–¥–∞—Ç—å –Ω–∞–¥–ø–∏—Å—å: "–í—ã –ø–æ–±–µ–¥–∏–ª–∏!" :)
 
 10.6. (2 –±–∞–ª–ª–∞) –¥–æ–±–∞–≤—å—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–æ–º–Ω–∞—Ç—ã —Å –ø–æ–º–æ—â—å—é —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –º–∞—Å—Å–∏–≤–∞:
 let roomString = """
 xxxxxxxxxx
 x........x
 xxx......x
 x...*....x
 x......+.x
 x..xx....x
 x..$.....x
 x........x
 xxxxxxxxxx
 –ì–¥–µ
 —Ö - –Ω–µ–ø—Ä–æ—Ö–æ–¥–∏–º–∞—è —Å—Ç–µ–Ω–∞
 * - —è—â–∏–∫
 + - —Ü–µ–ª–µ–≤–∞—è —Ç–æ—á–∫–∞, –∫—É–¥–∞ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–≤–∏–Ω—É—Ç—å —è—â–∏–∫
 $ - –ò–≥—Ä–æ–∫
 
 10.7. (2 –±–∞–ª–ª–∞) –î–æ–±–∞–≤—å—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Å–∫–≤–æ–∑—å —Å—Ç–µ–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞—Å—Å—Ç–∞–≤–ª–µ–Ω—ã –≤–Ω—É—Ç—Ä–∏ –∫–æ–º–Ω–∞—Ç—ã, –ø–æ–º–µ—á–µ–Ω–Ω—ã–µ "—Ö"
 */


import UIKit

class ViewController: UIViewController {
    
    //Enums
    enum Directions {
        case left
        case right
        case up
        case down
    }
    
    enum MapObjects {
        case wall
        case player
        case box
        case destination
    }
    

    //Outlets
    @IBOutlet weak var roomTextLabel: UILabel!
    
    
    //Variables
    let roomSize: Room = Room(width: 16, height: 10)
    var currentPlayer = Player(xCoordinate: 0, yCoordinate: 0)
    var currentBox = Box(xCoordinate: 0, yCoordinate: 0)
    var currentWinningPosition = winnigPosition(xCoordinate: 0, yCoordinate: 0)
    var gameIsOver = false
    
    
    override func viewDidLoad() {
        super.viewDidLoad()
        objectsCreation(box: &currentBox, currentWinningPosition: &currentWinningPosition)
        DrawRoom(roomSize)
    }

    
    struct Room {
        var width: Int
        var height: Int
    }
    
    
    struct Player {
        var xCoordinate: Int
        var yCoordinate: Int
        
        mutating func move (direction: Directions, room: Room, box: inout Box) {
            switch direction {
            case .up: if (self.yCoordinate == 1) {
                    break
            } else {
                    self.yCoordinate -= 1
                    if (self.yCoordinate == box.yCoordinate && self.xCoordinate == box.xCoordinate) {
                            box.beingMoved(direction: .up, room: room)
                    }
                }
            case .left: if (self.xCoordinate == 1) {
                break
            } else {
                self.xCoordinate -= 1
                    if (self.yCoordinate == box.yCoordinate && self.xCoordinate == box.xCoordinate) {
                        box.beingMoved(direction: .left, room: room)
                    }
                }
            case .right: if (self.xCoordinate == (room.width - 2)) {
                break
            } else {
                self.xCoordinate += 1
                    if (self.yCoordinate == box.yCoordinate && self.xCoordinate == box.xCoordinate) {
                        box.beingMoved(direction: .right, room: room)
                    }
                }
            case .down: if (self.yCoordinate == (room.height - 2)) {
                break
            } else {
                self.yCoordinate += 1
                    if (self.yCoordinate == box.yCoordinate && self.xCoordinate == box.xCoordinate) {
                        box.beingMoved(direction: .down, room: room)
                    }
                }
            }
        }
    }
    
    
    struct Box {
        var xCoordinate: Int
        var yCoordinate: Int
        
        mutating func beingMoved (direction: Directions, room: Room) {
            switch direction {
            case .up: if (self.yCoordinate == 1) {
                break
            } else {
                self.yCoordinate -= 1
                }
            case .left: if (self.xCoordinate == 1) {
                break
            } else {
                self.xCoordinate -= 1
                }
            case .right: if (self.xCoordinate == (room.width - 2)) {
                break
            } else {
                self.xCoordinate += 1
                }
            case .down: if (self.yCoordinate == (room.height - 2)) {
                break
            } else {
                self.yCoordinate += 1
                }
            }
        }
    }
    
    
    struct winnigPosition {
        var xCoordinate: Int
        var yCoordinate: Int
    }
    
    
    //Functions
    func DrawRoom (_ currentRoom: Room) {
        var newRoomString: String = ""
        
        for lineIndex in 0..<currentRoom.height
        {
            for columnIndex in 0..<currentRoom.width
            {
                if (lineIndex == currentPlayer.yCoordinate && columnIndex == currentPlayer.xCoordinate) {
                    newRoomString += "üï∫"
                } else if (lineIndex == currentBox.yCoordinate && columnIndex == currentBox.xCoordinate) {
                    newRoomString += "üì¶"
                } else if (lineIndex == currentWinningPosition.yCoordinate && columnIndex == currentWinningPosition.xCoordinate) {
                    newRoomString += "‚ùå"
                } else if (lineIndex == 0 || (lineIndex == currentRoom.height-1) || columnIndex == 0 || (columnIndex == currentRoom.width - 1)) {
                    newRoomString += "üöß"
                } else {
                    newRoomString += "üå´"
                }
            }
            newRoomString += "\n"
        }
        roomTextLabel.text = newRoomString
        
        checkIfGameIsOver()
        if gameIsOver {
            objectsCreation(box: &currentBox, currentWinningPosition: &currentWinningPosition)
            DrawRoom(roomSize)
        }
    }
    
    
    func objectsCreation (box: inout Box, currentWinningPosition: inout winnigPosition) {
        currentPlayer.xCoordinate = 5
        currentPlayer.yCoordinate = 7
        
        
        var randomXValue = Int.random(in: 2...13)
        var randomYValue = Int.random(in: 2...7)
        while (randomXValue == currentPlayer.xCoordinate || randomYValue == currentPlayer.yCoordinate) {
            randomXValue = Int.random(in: 2...13)
            randomYValue = Int.random(in: 2...7)
        }
        box.xCoordinate = randomXValue
        box.yCoordinate = randomYValue
        
        
        randomXValue = Int.random(in: 2...13)
        randomYValue = Int.random(in: 2...7)
        while (randomXValue == currentPlayer.xCoordinate || randomYValue == currentPlayer.yCoordinate || randomXValue == box.xCoordinate || randomYValue == box.yCoordinate) {
            randomXValue = Int.random(in: 2...13)
            randomYValue = Int.random(in: 2...7)
        }
        currentWinningPosition.xCoordinate = randomXValue
        currentWinningPosition.yCoordinate = randomYValue
    }
    
    
    func checkIfGameIsOver () {
        if (currentBox.xCoordinate == currentWinningPosition.xCoordinate && currentBox.yCoordinate == currentWinningPosition.yCoordinate) {
            gameIsOver = true
        }
    }
    
    
    //Buttons Actions
    @IBAction func buttonUpClicked () {
        currentPlayer.move(direction: Directions.up, room: roomSize, box: &currentBox)
        DrawRoom(roomSize)
    }
    
    @IBAction func buttonLeftClicked () {
        currentPlayer.move(direction: Directions.left, room: roomSize, box: &currentBox)
        DrawRoom(roomSize)
    }
    
    @IBAction func buttonRightClicked () {
        currentPlayer.move(direction: Directions.right, room: roomSize, box: &currentBox)
        DrawRoom(roomSize)
    }
    
    @IBAction func buttonDownClicked () {
        currentPlayer.move(direction: Directions.down, room: roomSize, box: &currentBox)
        DrawRoom(roomSize)
    }

}
